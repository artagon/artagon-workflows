# Reusable CI Workflow for C Projects
#
# Usage in your project's .github/workflows/ci.yml:
#
# name: CI
# on: [push, pull_request]
# jobs:
#   ci:
#     uses: artagon/artagon-workflows/.github/workflows/cmake_c_ci.yml@main
#     secrets: inherit

name: C Project CI

on:
  workflow_call:
    inputs:
      cmake-options:
        description: 'Additional CMake configuration options'
        required: false
        type: string
        default: ''
      enable-coverage:
        description: 'Enable code coverage reporting'
        required: false
        type: boolean
        default: true
      enable-sanitizers:
        description: 'Enable sanitizer builds'
        required: false
        type: boolean
        default: true
      c-standard:
        description: 'C standard version (11, 17, 23)'
        required: false
        type: string
        default: '17'

env:
  BUILD_TYPE: Release

jobs:
  validate-inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Check workflow inputs
        run: |
          set -euo pipefail

          CMAKE_OPTS="${{ inputs.cmake-options }}"
          if ! echo "$CMAKE_OPTS" | grep -qE '^[-A-Za-z0-9_./=:," ]*$'; then
            echo "❌ Invalid cmake-options: $CMAKE_OPTS"
            echo "Allowed characters: letters, numbers, space, dash, underscore, dot, slash, colon, equals, comma, double quotes"
            exit 1
          fi

          C_STANDARD="${{ inputs.c-standard }}"
          if ! echo "$C_STANDARD" | grep -qE '^(11|17|23)$'; then
            echo "❌ Invalid c-standard: $C_STANDARD"
            echo "Allowed values: 11, 17, 23"
            exit 1
          fi

          echo "✅ Input validation passed"

  build-linux:
    name: Build (${{ matrix.os }}, ${{ matrix.compiler }})
    runs-on: ${{ matrix.os }}
    needs: validate-inputs
    permissions:
      contents: read
      packages: read
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        compiler: [gcc, clang]
        include:
          - compiler: gcc
            cc: gcc-13
            cxx: g++-13
          - compiler: clang
            cc: clang-18
            cxx: clang++-18

    steps:
      - name: Checkout code
        # actions/checkout@v4.2.2
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          submodules: recursive

      - name: Check for Nix
        id: check-nix
        run: |
          if [ -f "flake.nix" ]; then
            echo "has_nix=true" >> $GITHUB_OUTPUT
          else
            echo "has_nix=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Nix
        if: steps.check-nix.outputs.has_nix == 'true'
        # cachix/install-nix-action@v30
        uses: cachix/install-nix-action@08dcb3a5e62fa31e2eb71ca1c1a4ae1b42a8f4b4
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Install dependencies (non-Nix)
        if: steps.check-nix.outputs.has_nix == 'false'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake ninja-build \
            gcc-13 g++-13 \
            clang-18 clang-tools-18 clang-tidy-18 clang-format-18 \
            cppcheck valgrind lcov doxygen graphviz

      - name: Configure CMake (with Nix)
        if: steps.check-nix.outputs.has_nix == 'true'
        run: |
          nix develop --command bash -c "
            cmake -B build \
              -G Ninja \
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
              -DCMAKE_C_STANDARD=${{ inputs.c-standard }} \
              -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
              ${{ inputs.cmake-options }}
          "

      - name: Configure CMake (without Nix)
        if: steps.check-nix.outputs.has_nix == 'false'
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          cmake -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_C_COMPILER=${{ matrix.cc }} \
            -DCMAKE_C_STANDARD=${{ inputs.c-standard }} \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            ${{ inputs.cmake-options }}

      - name: Build (with Nix)
        if: steps.check-nix.outputs.has_nix == 'true'
        run: nix develop --command cmake --build build --config ${{ env.BUILD_TYPE }} -j $(nproc)

      - name: Build (without Nix)
        if: steps.check-nix.outputs.has_nix == 'false'
        run: cmake --build build --config ${{ env.BUILD_TYPE }} -j $(nproc)

      - name: Run tests (with Nix)
        if: steps.check-nix.outputs.has_nix == 'true'
        working-directory: build
        run: nix develop --command ctest --output-on-failure --verbose

      - name: Run tests (without Nix)
        if: steps.check-nix.outputs.has_nix == 'false'
        working-directory: build
        run: ctest --output-on-failure --verbose

      - name: Static analysis (clang-tidy)
        if: matrix.compiler == 'clang'
        continue-on-error: true
        run: |
          if [ -f .clang-tidy ]; then
            find src -name '*.c' -exec clang-tidy-18 -p build {} \;
          fi

      - name: Static analysis (cppcheck)
        if: matrix.compiler == 'gcc'
        continue-on-error: true
        run: |
          cppcheck --enable=all --std=c${{ inputs.c-standard }} \
            --suppress=missingIncludeSystem \
            --inline-suppr -I include src/ 2>&1 | tee cppcheck.log

      - name: Upload build artifacts
        # actions/upload-artifact@v4.4.3
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882
        with:
          name: build-${{ matrix.os }}-${{ matrix.compiler }}
          path: |
            build/bin/
            build/lib/
          retention-days: 7

  build-multiplatform:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: validate-inputs
    permissions:
      contents: read
      packages: read
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - name: Checkout code
        # actions/checkout@v4.2.2
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          submodules: recursive

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install cmake ninja

      - name: Setup MSVC (Windows)
        if: matrix.os == 'windows-latest'
        # ilammy/msvc-dev-cmd@v1.13.0
        uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756

      - name: Configure CMake (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cmake -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_C_STANDARD=${{ inputs.c-standard }} \
            ${{ inputs.cmake-options }}

      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cmake -B build \
            -G "Visual Studio 17 2022" \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            ${{ inputs.cmake-options }}

      - name: Build (Unix)
        if: matrix.os != 'windows-latest'
        run: cmake --build build --config ${{ env.BUILD_TYPE }} -j $(sysctl -n hw.ncpu || nproc)

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: cmake --build build --config ${{ env.BUILD_TYPE }} -j $env:NUMBER_OF_PROCESSORS

      - name: Run tests
        working-directory: build
        run: ctest --output-on-failure --verbose -C ${{ env.BUILD_TYPE }}

      - name: Upload artifacts
        # actions/upload-artifact@v4.4.3
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882
        with:
          name: build-${{ matrix.os }}
          path: |
            build/bin/
            build/lib/
          retention-days: 7

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: inputs.enable-coverage
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        # actions/checkout@v4.2.2
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build gcc-13 lcov

      - name: Configure with coverage
        run: |
          cmake -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_C_COMPILER=gcc-13 \
            -DCMAKE_C_STANDARD=${{ inputs.c-standard }} \
            -DCMAKE_C_FLAGS="--coverage -fprofile-arcs -ftest-coverage" \
            ${{ inputs.cmake-options }}

      - name: Build
        run: cmake --build build -j $(nproc)

      - name: Run tests
        working-directory: build
        run: ctest --output-on-failure

      - name: Generate coverage
        run: |
          lcov --directory . --capture --output-file coverage.info
          lcov --remove coverage.info '/usr/*' '*/test/*' --output-file coverage.info
          lcov --list coverage.info

      - name: Upload to Codecov
        # codecov/codecov-action@v5.0.7
        uses: codecov/codecov-action@015f24e6818733317a2da2edd6290ab26238649a
        with:
          files: ./coverage.info
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  sanitizers:
    name: Sanitizers (${{ matrix.sanitizer }})
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: inputs.enable-sanitizers
    permissions:
      contents: read
      packages: read
    strategy:
      fail-fast: false
      matrix:
        sanitizer: [address, undefined, thread]

    steps:
      - name: Checkout code
        # actions/checkout@v4.2.2
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build clang-18

      - name: Configure with sanitizer
        run: |
          SANITIZER_FLAGS="-fsanitize=${{ matrix.sanitizer }} -fno-omit-frame-pointer -g"
          cmake -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_C_COMPILER=clang-18 \
            -DCMAKE_C_STANDARD=${{ inputs.c-standard }} \
            -DCMAKE_C_FLAGS="$SANITIZER_FLAGS" \
            -DCMAKE_EXE_LINKER_FLAGS="$SANITIZER_FLAGS" \
            ${{ inputs.cmake-options }}

      - name: Build
        run: cmake --build build -j $(nproc)

      - name: Run tests
        working-directory: build
        env:
          ASAN_OPTIONS: detect_leaks=1:check_initialization_order=1
          UBSAN_OPTIONS: print_stacktrace=1
        run: ctest --output-on-failure

  valgrind:
    name: Memory Check (Valgrind)
    runs-on: ubuntu-latest
    needs: validate-inputs
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        # actions/checkout@v4.2.2
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build gcc-13 valgrind

      - name: Configure CMake
        run: |
          cmake -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_C_COMPILER=gcc-13 \
            -DCMAKE_C_STANDARD=${{ inputs.c-standard }} \
            ${{ inputs.cmake-options }}

      - name: Build
        run: cmake --build build -j $(nproc)

      - name: Run Valgrind
        working-directory: build
        continue-on-error: true
        run: ctest -T memcheck --output-on-failure

  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    needs: validate-inputs
    permissions:
      contents: read

    steps:
      - name: Checkout code
        # actions/checkout@v4.2.2
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Install clang-format
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format-18

      - name: Check formatting
        run: |
          if [ -f .clang-format ]; then
            find src include -type f \( -name '*.c' -o -name '*.h' \) \
              -exec clang-format-18 --dry-run --Werror {} \;
          fi
