# Reusable Maven Central Release Workflow
#
# Usage in your project's .github/workflows/release.yml:
#
# name: Release to Maven Central
# on:
#   push:
#     tags: ['v*']
# jobs:
#   release:
#     uses: artagon/artagon-common/.github/workflows/maven-central-release.yml@main
#     secrets: inherit

name: Maven Central Release (Reusable)

on:
  workflow_call:
    inputs:
      java-version:
        description: 'Java version to use'
        required: false
        type: string
        default: '25'
      java-distribution:
        description: 'Java distribution'
        required: false
        type: string
        default: 'temurin'
      maven-profile:
        description: 'Maven profile for release'
        required: false
        type: string
        default: 'ossrh-deploy'
      maven-args:
        description: 'Additional Maven arguments'
        required: false
        type: string
        default: ''
      create-github-release:
        description: 'Create GitHub release'
        required: false
        type: boolean
        default: true
    secrets:
      OSSRH_USERNAME:
        required: true
      OSSRH_PASSWORD:
        required: true
      GPG_PRIVATE_KEY:
        required: true
      GPG_PASSPHRASE:
        required: true

jobs:
  release:
    name: Release to Maven Central
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout code
        # actions/checkout@v4.2.2
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up JDK ${{ inputs.java-version }}
        # actions/setup-java@v4.5.0
        uses: actions/setup-java@8df1039502a15bceb9433410b1a100fbe190c53b
        with:
          java-version: ${{ inputs.java-version }}
          distribution: ${{ inputs.java-distribution }}
          cache: 'maven'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Cache Maven packages
        # actions/cache@v4.2.0
        uses: actions/cache@6b4aaeccebf87edbd8d8e8efe558f8e66d92e814
        with:
          path: ~/.m2/repository
          key: maven-release-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-release-${{ runner.os }}-

      - name: Get version from tag
        id: get-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Get project version
        id: get-project-version
        run: |
          PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "project_version=$PROJECT_VERSION" >> $GITHUB_OUTPUT
          echo "Project POM version: $PROJECT_VERSION"

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Build and Deploy to Maven Central
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          mvn clean deploy \
            -P${{ inputs.maven-profile }} \
            -DskipTests \
            ${{ inputs.maven-args }}

      - name: Attest Build Provenance
        # actions/attest-build-provenance@v2.0.0
        uses: actions/attest-build-provenance@7bcbc6a0e5c3d3d7ef75dc4cebc6c9d286ec4bb9
        with:
          subject-path: |
            **/target/*.jar
            **/target/*.pom

      - name: Create GitHub Release
        if: inputs.create-github-release
        # softprops/action-gh-release@v2.2.0
        uses: softprops/action-gh-release@da07017b40e28a1a0a35a90e201ca6e05c3dda96
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ steps.get-version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            **/target/*.jar
            **/target/*.pom
            **/target/*.asc

      - name: Summary
        run: |
          echo "## 🚀 Maven Central Release Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.get-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Profile:** ${{ inputs.maven-profile }}" >> $GITHUB_STEP_SUMMARY
          echo "**Java:** ${{ inputs.java-version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- Repository: Maven Central (OSSRH)" >> $GITHUB_STEP_SUMMARY
          echo "- URL: https://s01.oss.sonatype.org/" >> $GITHUB_STEP_SUMMARY
          echo "- Status: Staged for release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⏭️ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to https://s01.oss.sonatype.org/" >> $GITHUB_STEP_SUMMARY
          echo "2. Login with OSSRH credentials" >> $GITHUB_STEP_SUMMARY
          echo "3. Review and close the staging repository" >> $GITHUB_STEP_SUMMARY
          echo "4. Release to Maven Central" >> $GITHUB_STEP_SUMMARY
