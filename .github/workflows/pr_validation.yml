# PR Validation Reusable Workflow
#
# Validates pull requests for:
# - Semantic PR titles
# - Branch naming conventions
# - Semantic commit messages
# - Issue references
# - Auto-labeling
#
# Usage:
#   jobs:
#     validate:
#       uses: artagon/artagon-workflows/.github/workflows/pr_validation.yml@main
#       secrets:
#         token: ${{ secrets.GITHUB_TOKEN }}

name: PR Validation

on:
  workflow_call:
    inputs:
      require-issue-reference:
        description: 'Fail if no issue reference found (default: false, only warns)'
        required: false
        type: boolean
        default: false
      enable-auto-label:
        description: 'Enable automatic PR labeling (default: true)'
        required: false
        type: boolean
        default: true
      labeler-config-path:
        description: 'Path to labeler configuration (default: .github/labeler.yml)'
        required: false
        type: string
        default: '.github/labeler.yml'
    secrets:
      token:
        description: 'GitHub token for API operations'
        required: true

jobs:
  validate:
    name: Validate PR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout code
        # actions/checkout@v4.2.2
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0

      - name: Validate PR Title
        # amannn/action-semantic-pull-request@v5.5.3
        uses: amannn/action-semantic-pull-request@0723387faaf9b38adef4775cd42cfd5155ed6017
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
            merge
          scopes: |
            workflows
            scripts
            docs
            bazel
            cmake
            maven
            cargo
            nix
            ci
            deploy
            templates
            hooks
            agents
          requireScope: false
          subjectPattern: ^[a-z].+$
          subjectPatternError: |
            Subject must start with lowercase letter and be descriptive.
            Examples:
              - feat(bazel): add C++26 support
              - fix(workflows): correct matrix syntax
              - docs: update API reference
          wip: true
          validateSingleCommit: false

      - name: Check Branch Name
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Branch: $BRANCH_NAME"

          # Valid branch pattern: <type>/<issue>-<description> or <type>/<description>
          if [[ "$BRANCH_NAME" =~ ^(feat|fix|docs|style|refactor|perf|test|build|ci|chore)/.+ ]]; then
            echo "‚úì Branch name follows semantic convention"

            # Check if it includes issue number
            if [[ "$BRANCH_NAME" =~ ^[a-z]+/[0-9]+-[a-z] ]]; then
              echo "‚úì Branch includes issue number"
            else
              echo "‚ö†Ô∏è  Warning: Branch doesn't include issue number (recommended format: type/123-description)"
            fi
          else
            echo "‚úó Branch name doesn't follow semantic convention"
            echo ""
            echo "Expected format: <type>/<issue>-<description>"
            echo "Examples:"
            echo "  - feat/42-add-cpp26-support"
            echo "  - fix/38-workflow-matrix-bug"
            echo "  - docs/45-api-examples"
            echo ""
            echo "Valid types: feat, fix, docs, style, refactor, perf, test, build, ci, chore"
            exit 1
          fi

      - name: Check Commit Messages
        run: |
          echo "Checking commit messages..."

          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          # Get all commits in PR
          COMMITS=$(git log --format=%H "$BASE_SHA".."$HEAD_SHA")

          INVALID_COUNT=0
          TOTAL_COUNT=0

          for commit in $COMMITS; do
            TOTAL_COUNT=$((TOTAL_COUNT + 1))
            MSG=$(git log --format=%s -n 1 "$commit")

            # Skip merge commits
            if [[ "$MSG" =~ ^Merge ]]; then
              continue
            fi

            # Check semantic format
            if [[ "$MSG" =~ ^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert|merge)(\(.+\))?!?:\ .+ ]]; then
              echo "‚úì $commit: $MSG"
            else
              echo "‚úó $commit: $MSG"
              INVALID_COUNT=$((INVALID_COUNT + 1))
            fi
          done

          echo ""
          echo "Checked $TOTAL_COUNT commits"

          if [ $INVALID_COUNT -gt 0 ]; then
            echo "‚úó Found $INVALID_COUNT invalid commit message(s)"
            echo ""
            echo "Commit messages must follow semantic format:"
            echo "  <type>(<scope>): <subject>"
            echo ""
            echo "Valid types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert, merge"
            exit 1
          else
            echo "‚úì All commit messages are valid"
          fi

      - name: Check for Issue Reference
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          BRANCH_NAME: ${{ github.head_ref }}
          REQUIRE_ISSUE: ${{ inputs.require-issue-reference }}
        run: |
          # Check if issue is referenced in body, title, or branch
          if echo "$PR_BODY" | grep -qiE "(closes?|fixes?|resolves?) #[0-9]+"; then
            echo "‚úì Issue referenced in PR body"
            exit 0
          fi

          if echo "$PR_TITLE" | grep -qE "#[0-9]+"; then
            echo "‚úì Issue referenced in PR title"
            exit 0
          fi

          if echo "$BRANCH_NAME" | grep -qE "/[0-9]+-"; then
            echo "‚úì Issue number in branch name"
            exit 0
          fi

          if [ "$REQUIRE_ISSUE" = "true" ]; then
            echo "‚úó No issue reference found (required)"
            echo ""
            echo "Link PRs to issues using:"
            echo "  - 'Closes #123' in PR body"
            echo "  - Issue number in branch name: feat/123-description"
            exit 1
          else
            echo "‚ö†Ô∏è  Warning: No issue reference found"
            echo ""
            echo "It's recommended to link PRs to issues using:"
            echo "  - 'Closes #123' in PR body"
            echo "  - Issue number in branch name: feat/123-description"
            echo ""
            echo "This is a warning only, not blocking."
          fi

      - name: Auto-label PR
        if: inputs.enable-auto-label
        # actions/labeler@v5.0.0
        uses: actions/labeler@8558fd74291d67161a8a78ce36a881fa63b766a9
        with:
          repo-token: ${{ secrets.token }}
          configuration-path: ${{ inputs.labeler-config-path }}
          sync-labels: true

  comment:
    name: Add Welcome Comment
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.action == 'opened'
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Add Welcome Comment
        # actions/github-script@v7.0.1
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          github-token: ${{ secrets.token }}
          script: |
            const comment = `## Thank you for your contribution! üéâ

            Your PR has been validated and is ready for review.

            ### What happens next?
            1. Automated checks will run (tests, linting, etc.)
            2. Maintainers will review your changes
            3. You may be asked to make updates based on feedback
            4. Once approved, your PR will be merged

            ### While you wait
            - Ensure all CI checks pass ‚úÖ
            - Review the contributing guidelines
            - Check semantic commit format documentation

            ---
            ü§ñ This comment was generated automatically`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
