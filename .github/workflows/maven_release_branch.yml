name: Maven Release Branch (Reusable)

on:
  workflow_call:
    inputs:
      java-version:
        description: 'Java version to use when building/verifying'
        required: false
        type: string
        default: '25'
      java-distribution:
        description: 'Java distribution to install'
        required: false
        type: string
        default: 'temurin'
      run-tests:
        description: 'Run unit tests during the release branch build'
        required: false
        type: boolean
        default: true
      run-integration-tests:
        description: 'Run integration tests during the release branch build'
        required: false
        type: boolean
        default: true
      maven-args:
        description: 'Additional Maven arguments for the build job'
        required: false
        type: string
        default: ''
      run-dependency-check:
        description: 'Execute OWASP Dependency Check'
        required: false
        type: boolean
        default: true
      run-ossindex-audit:
        description: 'Execute Sonatype OSS Index audit'
        required: false
        type: boolean
        default: true
      run-trivy-scan:
        description: 'Execute Trivy vulnerability scan'
        required: false
        type: boolean
        default: true
      fail-on-severity:
        description: 'Minimum severity that fails the security scan'
        required: false
        type: string
        default: 'HIGH'
      deploy-to-staging:
        description: 'Deploy artifacts to staging repositories after validation'
        required: false
        type: boolean
        default: false
      deploy-profile:
        description: 'Maven profile used when deploying to staging'
        required: false
        type: string
        default: 'ossrh-deploy,artagon-oss-release'
      deploy-skip-tests:
        description: 'Skip tests when deploying to staging'
        required: false
        type: boolean
        default: false
      deploy-args:
        description: 'Additional Maven arguments for the staging deploy'
        required: false
        type: string
        default: ''
    secrets:
      OSSRH_USERNAME:
        description: 'Sonatype OSSRH username (required if deploy-to-staging is true)'
        required: false
      OSSRH_PASSWORD:
        description: 'Sonatype OSSRH password (required if deploy-to-staging is true)'
        required: false
      GPG_PRIVATE_KEY:
        description: 'GPG private key used for signing artifacts'
        required: false
      GPG_PASSPHRASE:
        description: 'GPG key passphrase'
        required: false

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and Test
    uses: ./.github/workflows/maven_build.yml
    with:
      java-version: ${{ inputs.java-version }}
      java-distribution: ${{ inputs.java-distribution }}
      run-tests: ${{ inputs.run-tests }}
      run-integration-tests: ${{ inputs.run-integration-tests }}
      maven-args: ${{ inputs.maven-args }}

  security:
    name: Security Baseline
    needs: build
    uses: ./.github/workflows/maven_security_scan.yml
    with:
      java-version: ${{ inputs.java-version }}
      run-dependency-check: ${{ inputs.run-dependency-check }}
      run-ossindex-audit: ${{ inputs.run-ossindex-audit }}
      run-trivy-scan: ${{ inputs.run-trivy-scan }}
      fail-on-severity: ${{ inputs.fail-on-severity }}

  release-readiness:
    name: Release Readiness
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        # actions/checkout@v4.2.2
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Set up Java ${{ inputs.java-version }}
        # actions/setup-java@v4.5.0
        uses: actions/setup-java@8df1039502a15bceb9433410b1a100fbe190c53b
        with:
          java-version: ${{ inputs.java-version }}
          distribution: ${{ inputs.java-distribution }}
          cache: 'maven'

      - name: Verify branch naming matches Maven version
        id: verify-branch-version
        shell: bash
        run: |
          set -euo pipefail
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          VERSION_FROM_BRANCH="${BRANCH_NAME#release-}"
          if [[ -f pom.xml ]]; then
            VERSION_FROM_POM="$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"
            if [[ "${VERSION_FROM_POM}" == *-SNAPSHOT ]]; then
              echo "Expected a release-ready version on release branches, found ${VERSION_FROM_POM}" >&2
              exit 1
            fi
            if [[ "${VERSION_FROM_BRANCH}" != "${VERSION_FROM_POM}" ]]; then
              echo "Release branch (${BRANCH_NAME}) must encode the project version (${VERSION_FROM_POM})." >&2
              echo "Expected branch release-${VERSION_FROM_POM}" >&2
              exit 1
            fi
          else
            echo "pom.xml not found; skipping version verification."
          fi

      - name: Verify dependency checksums (optional)
        if: hashFiles('scripts/security/verify-checksums.sh') != ''
        shell: bash
        run: |
          set -euo pipefail
          chmod +x scripts/security/verify-checksums.sh
          if [[ -d security ]]; then
            mapfile -t files < <(find security -maxdepth 1 -type f \( -name '*.csv' -o -name '*.list' \))
            if [[ ${#files[@]} -gt 0 ]]; then
              args=()
              for file_path in "${files[@]}"; do
                args+=("$(basename "$file_path")")
              done
              scripts/security/verify-checksums.sh --security-dir security "${args[@]}"
            else
              echo "No security checksum files detected; skipping verification."
            fi
          else
            echo "Security directory not present; skipping checksum verification."
          fi

  deploy-staging:
    name: Deploy to Staging
    needs:
      - security
      - release-readiness
    if: ${{ inputs.deploy-to-staging }}
    uses: ./.github/workflows/maven_deploy.yml
    with:
      java-version: ${{ inputs.java-version }}
      java-distribution: ${{ inputs.java-distribution }}
      deploy-profile: ${{ inputs.deploy-profile }}
      skip-tests: ${{ inputs.deploy-skip-tests }}
      maven-args: ${{ inputs.deploy-args }}
    secrets:
      OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
