name: Maven Release (Reusable)

on:
  workflow_call:
    inputs:
      java-version:
        description: 'Java version to use'
        required: false
        type: string
        default: '25'
      java-distribution:
        description: 'Java distribution'
        required: false
        type: string
        default: 'temurin'
      deploy-profile:
        description: 'Maven profile for deployment'
        required: false
        type: string
        default: 'ossrh-deploy,artagon-oss-release'
      auto-release-nexus:
        description: 'Automatically release from Nexus staging'
        required: false
        type: boolean
        default: true
      create-github-release:
        description: 'Create GitHub release'
        required: false
        type: boolean
        default: true
    secrets:
      OSSRH_USERNAME:
        description: 'Sonatype OSSRH username'
        required: true
      OSSRH_PASSWORD:
        description: 'Sonatype OSSRH password'
        required: true
      GPG_PRIVATE_KEY:
        description: 'GPG private key for signing'
        required: true
      GPG_PASSPHRASE:
        description: 'GPG passphrase'
        required: true
      GITHUB_TOKEN:
        description: 'GitHub token for creating releases'
        required: false
    outputs:
      release-tag:
        description: 'The git tag created for the release'
        value: ${{ jobs.release.outputs.tag }}
      release-version:
        description: 'The release version'
        value: ${{ jobs.release.outputs.version }}

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.create-tag.outputs.tag }}
      version: ${{ steps.set-release-version.outputs.release-version }}

    steps:
      - name: Validate release branch
        run: |
          BRANCH="${GITHUB_REF#refs/heads/}"
          echo "Current branch: $BRANCH"

          if [[ "$BRANCH" != release-* ]]; then
            echo "‚ùå ERROR: Releases must be created from release-* branches"
            echo ""
            echo "Current branch: $BRANCH"
            echo ""
            echo "To create a release:"
            echo "  1. Ensure main branch has next SNAPSHOT version (e.g., 1.0.9-SNAPSHOT)"
            echo "  2. Create release branch: git checkout -b release-1.0.8 <commit-at-1.0.8-SNAPSHOT>"
            echo "  3. Push release branch: git push origin release-1.0.8"
            echo "  4. Trigger this workflow from the release-1.0.8 branch"
            exit 1
          fi

          echo "‚úÖ Running from release branch: $BRANCH"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ inputs.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: ${{ inputs.java-distribution }}
          cache: 'maven'
          server-id: ossrh
          server-username: OSSRH_USERNAME
          server-password: OSSRH_PASSWORD

      - name: Import GPG key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Validate SNAPSHOT version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current POM version: $VERSION"

          if [[ "$VERSION" != *-SNAPSHOT ]]; then
            echo "‚ùå ERROR: Release branch must start with a SNAPSHOT version"
            echo ""
            echo "Current version: $VERSION"
            echo ""
            echo "The release process works as follows:"
            echo "  1. Release branch should be created from main with SNAPSHOT version"
            echo "  2. This workflow removes -SNAPSHOT to create release version"
            echo "  3. Release branch stays at release version for hotfixes"
            echo "  4. Main branch continues with next SNAPSHOT version"
            exit 1
          fi

          echo "‚úÖ Version is SNAPSHOT: $VERSION"

      - name: Set release version
        id: set-release-version
        run: |
          SNAPSHOT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          RELEASE_VERSION="${SNAPSHOT_VERSION%-SNAPSHOT}"

          echo "release-version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "Releasing version: $RELEASE_VERSION"

          mvn versions:set -DnewVersion="$RELEASE_VERSION" -DgenerateBackupPoms=false
          git add .
          git commit -m "chore: release version $RELEASE_VERSION"

          echo "‚úÖ Set release version: $RELEASE_VERSION"

      - name: Build and deploy release
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          mvn clean deploy -P${{ inputs.deploy-profile }} -DskipTests \
            -Dgpg.passphrase="$GPG_PASSPHRASE" \
            --batch-mode --no-transfer-progress

      - name: Create git tag
        id: create-tag
        run: |
          RELEASE_VERSION="${{ steps.set-release-version.outputs.release-version }}"
          TAG="v$RELEASE_VERSION"

          git tag -a "$TAG" -m "Release $RELEASE_VERSION"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "‚úÖ Created tag: $TAG"

      - name: Push release branch and tag
        run: |
          BRANCH="${GITHUB_REF#refs/heads/}"
          TAG="${{ steps.create-tag.outputs.tag }}"

          echo "Pushing release branch: $BRANCH"
          git push origin "$BRANCH"

          echo "Pushing release tag: $TAG"
          git push origin "$TAG"

          echo ""
          echo "‚úÖ Release branch and tag pushed successfully"
          echo "üì¶ Branch: $BRANCH"
          echo "üè∑Ô∏è  Tag: $TAG"
          echo ""
          echo "Note: Release branch will remain at release version for hotfixes."
          echo "Main branch should be updated separately to next SNAPSHOT version."

      - name: Release from Nexus staging
        if: inputs.auto-release-nexus
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        run: |
          mvn nexus-staging:release -P${{ inputs.deploy-profile }} \
            --batch-mode --no-transfer-progress

      - name: Create GitHub Release
        if: inputs.create-github-release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN || github.token }}
        with:
          tag_name: ${{ steps.create-tag.outputs.tag }}
          name: Release ${{ steps.set-release-version.outputs.release-version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## Release ${{ steps.set-release-version.outputs.release-version }}

            Maven Central coordinates:
            ```xml
            <dependency>
                <groupId>org.artagon</groupId>
                <artifactId>artagon-bom</artifactId>
                <version>${{ steps.set-release-version.outputs.release-version }}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            ```

            Artifacts will sync to Maven Central in 2-4 hours.
