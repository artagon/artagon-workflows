# Reusable Bazel CI Workflow
#
# Usage in your project's .github/workflows/ci.yml:
#
# name: CI
# on: [push, pull_request]
# jobs:
#   ci:
#     uses: artagon/artagon-common/.github/workflows/bazel-ci.yml@main
#     with:
#       bazel-configs: 'release,asan,ubsan'
#     secrets: inherit

name: Bazel Project CI

on:
  workflow_call:
    inputs:
      bazel-version:
        description: 'Bazel version (or "latest")'
        required: false
        type: string
        default: 'latest'
      bazel-configs:
        description: 'Bazel configs to test (comma-separated: release,debug,asan,ubsan,tsan)'
        required: false
        type: string
        default: 'release,debug'
      enable-coverage:
        description: 'Enable code coverage'
        required: false
        type: boolean
        default: true
      targets:
        description: 'Bazel targets to build/test (default: //...)'
        required: false
        type: string
        default: '//...'

env:
  BAZELISK_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  validate-inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Check workflow inputs
        run: |
          set -euo pipefail

          CONFIGS="${{ inputs.bazel-configs }}"
          if ! echo "$CONFIGS" | grep -qE '^[A-Za-z0-9_, -]+$'; then
            echo "❌ Invalid bazel-configs: $CONFIGS"
            echo "Allowed characters: letters, numbers, comma, space, hyphen"
            exit 1
          fi

          TARGETS="${{ inputs.targets }}"
          if ! echo "$TARGETS" | grep -qE '^[@/A-Za-z0-9_:.\\*\\- ]+$'; then
            echo "❌ Invalid targets: $TARGETS"
            echo "Allowed characters: letters, numbers, space, /, :, ., _, -, *, @"
            exit 1
          fi

          echo "✅ Input validation passed"

  build-test:
    name: Build and Test (${{ matrix.os }}, ${{ matrix.config }})
    runs-on: ${{ matrix.os }}
    needs: validate-inputs
    permissions:
      contents: read       # Checkout code
      packages: read       # Download artifacts (if needed)
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        config: ${{ fromJson(format('[{0}]', inputs.bazel-configs)) }}

    steps:
      - name: Checkout code
        # actions/checkout@v4.2.2
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          submodules: recursive

      - name: Check for Nix
        id: check-nix
        run: |
          if [ -f "flake.nix" ]; then
            echo "has_nix=true" >> $GITHUB_OUTPUT
          else
            echo "has_nix=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Nix
        if: steps.check-nix.outputs.has_nix == 'true'
        # cachix/install-nix-action@v30
        uses: cachix/install-nix-action@08dcb3a5e62fa31e2eb71ca1c1a4ae1b42a8f4b4
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Setup Bazelisk (non-Nix)
        if: steps.check-nix.outputs.has_nix == 'false'
        # bazelbuild/setup-bazelisk@v3.0.1
        uses: bazelbuild/setup-bazelisk@b63ef97e907d9f0dc8c6f99a88a89f63d533addc

      - name: Mount Bazel cache
        # actions/cache@v4.1.2
        uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a
        with:
          path: |
            ~/.cache/bazel
            ~/.cache/bazelisk
          key: ${{ runner.os }}-bazel-${{ hashFiles('**/BUILD.bazel', '**/WORKSPACE.bazel', '**/MODULE.bazel') }}
          restore-keys: |
            ${{ runner.os }}-bazel-

      - name: Build with Nix
        if: steps.check-nix.outputs.has_nix == 'true'
        run: |
          nix develop --command bash -c "
            bazel build --config=${{ matrix.config }} ${{ inputs.targets }}
          "

      - name: Build (non-Nix)
        if: steps.check-nix.outputs.has_nix == 'false'
        run: bazel build --config=${{ matrix.config }} ${{ inputs.targets }}

      - name: Test with Nix
        if: steps.check-nix.outputs.has_nix == 'true'
        run: |
          nix develop --command bash -c "
            bazel test --config=${{ matrix.config }} --test_output=errors ${{ inputs.targets }}
          "

      - name: Test (non-Nix)
        if: steps.check-nix.outputs.has_nix == 'false'
        run: bazel test --config=${{ matrix.config }} --test_output=errors ${{ inputs.targets }}

      - name: Upload test results
        if: always()
        # actions/upload-artifact@v4.4.3
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.config }}
          path: bazel-testlogs/
          retention-days: 7

  build-windows:
    name: Build and Test (Windows)
    runs-on: windows-latest
    needs: validate-inputs
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        # actions/checkout@v4.2.2
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          submodules: recursive

      - name: Setup Bazelisk
        # bazelbuild/setup-bazelisk@v3.0.1
        uses: bazelbuild/setup-bazelisk@b63ef97e907d9f0dc8c6f99a88a89f63d533addc

      - name: Mount Bazel cache
        # actions/cache@v4.1.2
        uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a
        with:
          path: |
            ~/.cache/bazel
            ~/.cache/bazelisk
          key: windows-bazel-${{ hashFiles('**/BUILD.bazel', '**/WORKSPACE.bazel', '**/MODULE.bazel') }}
          restore-keys: |
            windows-bazel-

      - name: Build
        run: bazel build --config=release ${{ inputs.targets }}

      - name: Test
        run: bazel test --config=release --test_output=errors ${{ inputs.targets }}

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: inputs.enable-coverage
    needs: validate-inputs
    permissions:
      contents: read

    steps:
      - name: Checkout code
        # actions/checkout@v4.2.2
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          submodules: recursive

      - name: Check for Nix
        id: check-nix
        run: |
          if [ -f "flake.nix" ]; then
            echo "has_nix=true" >> $GITHUB_OUTPUT
          else
            echo "has_nix=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Nix
        if: steps.check-nix.outputs.has_nix == 'true'
        # cachix/install-nix-action@v30
        uses: cachix/install-nix-action@08dcb3a5e62fa31e2eb71ca1c1a4ae1b42a8f4b4
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Setup Bazelisk (non-Nix)
        if: steps.check-nix.outputs.has_nix == 'false'
        # bazelbuild/setup-bazelisk@v3.0.1
        uses: bazelbuild/setup-bazelisk@b63ef97e907d9f0dc8c6f99a88a89f63d533addc

      - name: Install lcov
        run: sudo apt-get update && sudo apt-get install -y lcov

      - name: Run coverage with Nix
        if: steps.check-nix.outputs.has_nix == 'true'
        run: |
          nix develop --command bash -c "
            bazel coverage --config=coverage --combined_report=lcov ${{ inputs.targets }}
          "

      - name: Run coverage (non-Nix)
        if: steps.check-nix.outputs.has_nix == 'false'
        run: bazel coverage --config=coverage --combined_report=lcov ${{ inputs.targets }}

      - name: Upload coverage to Codecov
        # codecov/codecov-action@v5.0.7
        uses: codecov/codecov-action@015f24e6818733317a2da2edd6290ab26238649a
        with:
          files: ./bazel-out/_coverage/_coverage_report.dat
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  buildifier:
    name: Buildifier (Format Check)
    runs-on: ubuntu-latest
    needs: validate-inputs
    permissions:
      contents: read

    steps:
      - name: Checkout code
        # actions/checkout@v4.2.2
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Buildifier
        run: |
          # v6.4.0 corresponds to commit 42968f9
          BUILDIFIER_VERSION="6.4.0"
          BUILDIFIER_SHA256="be63db12899f48600bad94051123b1fd7b5251e7661b9168582ce52396132e92"

          # Download with certificate validation (curl validates certs by default)
          curl --fail-with-body \
            --location \
            --silent \
            --show-error \
            --proto '=https' \
            --tlsv1.3 \
            --output /tmp/buildifier \
            "https://github.com/bazelbuild/buildtools/releases/download/v${BUILDIFIER_VERSION}/buildifier-linux-amd64"

          # Verify SHA256 checksum
          echo "${BUILDIFIER_SHA256}  /tmp/buildifier" | sha256sum --check

          sudo mv /tmp/buildifier /usr/local/bin/buildifier
          sudo chmod +x /usr/local/bin/buildifier

          buildifier --version

      - name: Check formatting
        run: |
          buildifier --lint=warn --mode=check -r .

  bazel-query:
    name: Bazel Query Analysis
    runs-on: ubuntu-latest
    needs: validate-inputs
    permissions:
      contents: read

    steps:
      - name: Checkout code
        # actions/checkout@v4.2.2
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Bazelisk
        # bazelbuild/setup-bazelisk@v3.0.1
        uses: bazelbuild/setup-bazelisk@b63ef97e907d9f0dc8c6f99a88a89f63d533addc

      - name: Query targets
        run: |
          echo "All buildable targets:"
          bazel query 'kind(".*_binary", //...)' || true
          echo ""
          echo "All test targets:"
          bazel query 'kind(".*_test", //...)' || true

      - name: Analyze dependencies
        run: |
          bazel query --output=graph 'deps(${{ inputs.targets }})' > deps.dot || true

      - name: Upload dependency graph
        if: always()
        # actions/upload-artifact@v4.4.3
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882
        with:
          name: dependency-graph
          path: deps.dot
          retention-days: 7
