# Reusable workflow to update artagon-common submodule in other projects
#
# Usage in your project's .github/workflows/update-common.yml:
#
# name: Update Common Scripts
#
# on:
#   schedule:
#     - cron: "0 6 * * 1"  # Weekly on Monday at 6 AM
#   workflow_dispatch:
#
# jobs:
#   update:
#     uses: artagon/artagon-common/.github/workflows/update-submodule.yml@main
#     with:
#       submodule-path: .common/artagon-common
#       branch: main
#     secrets:
#       token: ${{ secrets.GITHUB_TOKEN }}

name: Update Artagon Common Submodule

on:
  workflow_call:
    inputs:
      submodule-path:
        description: 'Path to the artagon-common submodule'
        required: false
        type: string
        default: '.common/artagon-common'
      branch:
        description: 'Branch to update to'
        required: false
        type: string
        default: 'main'
      create-pr:
        description: 'Create pull request for updates'
        required: false
        type: boolean
        default: true
    secrets:
      token:
        description: 'GitHub token with repo permissions'
        required: true

jobs:
  update-submodule:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        # actions/checkout@v4.2.2
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          submodules: true
          token: ${{ secrets.token }}

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update submodule to latest
        id: update
        run: |
          cd ${{ inputs.submodule-path }}

          # Fetch latest changes
          git fetch origin

          # Get current commit
          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "current-commit=$CURRENT_COMMIT" >> $GITHUB_OUTPUT

          # Checkout specified branch
          git checkout ${{ inputs.branch }}
          git pull origin ${{ inputs.branch }}

          # Get new commit
          NEW_COMMIT=$(git rev-parse HEAD)
          echo "new-commit=$NEW_COMMIT" >> $GITHUB_OUTPUT

          cd ../..

          # Check if there are changes
          if git diff --quiet ${{ inputs.submodule-path }}; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No updates available"
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Updates found: $CURRENT_COMMIT -> $NEW_COMMIT"
          fi

      - name: Get commit messages
        id: changelog
        if: steps.update.outputs.has-changes == 'true'
        run: |
          cd ${{ inputs.submodule-path }}

          CHANGELOG=$(git log --oneline ${{ steps.update.outputs.current-commit }}..${{ steps.update.outputs.new-commit }})

          # Save to file for multi-line output
          echo "$CHANGELOG" > /tmp/changelog.txt

          # Also create a formatted version
          echo "## Changes" > /tmp/pr-body.txt
          echo "" >> /tmp/pr-body.txt
          SUBMOD="${{ inputs.submodule-path }}"
          OLD_COMMIT="${{ steps.update.outputs.current-commit }}"
          NEW_COMMIT="${{ steps.update.outputs.new-commit }}"
          echo "Updated \`$SUBMOD\` from \`$OLD_COMMIT\` to \`$NEW_COMMIT\`" >> /tmp/pr-body.txt
          echo "" >> /tmp/pr-body.txt
          echo "### Commits" >> /tmp/pr-body.txt
          echo "\`\`\`" >> /tmp/pr-body.txt
          echo "$CHANGELOG" >> /tmp/pr-body.txt
          echo "\`\`\`" >> /tmp/pr-body.txt

      - name: Create Pull Request
        if: steps.update.outputs.has-changes == 'true' && inputs.create-pr
        # peter-evans/create-pull-request@v7.0.5
        uses: peter-evans/create-pull-request@5b4a9f6a9e2af04be7c89d62e3dc3c19da083ddc
        with:
          token: ${{ secrets.token }}
          commit-message: "Update artagon-common submodule to latest ${{ inputs.branch }}"
          title: "Update artagon-common submodule"
          body-path: /tmp/pr-body.txt
          branch: update-artagon-common
          delete-branch: true
          labels: |
            dependencies
            automated

      - name: Commit directly (no PR)
        if: steps.update.outputs.has-changes == 'true' && !inputs.create-pr
        run: |
          git add ${{ inputs.submodule-path }}
          git commit -m "Update artagon-common submodule to latest ${{ inputs.branch }}"
          git push origin ${{ github.ref_name }}

      - name: No changes detected
        if: steps.update.outputs.has-changes == 'false'
        run: |
          echo "âœ“ artagon-common is already up to date"
